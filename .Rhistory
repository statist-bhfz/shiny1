help()
?help
demo(smooth)
x <- sqrt(12)
x
library(Rcmdr)
Title
========================================================
This is an R Markdown document. Markdown is a simple formatting syntax for authoring web pages (click the **MD** toolbar button for help on Markdown).
When you click the **Knit HTML** button a web page will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r}
summary(cars)
```
You can also embed plots, for example:
```{r fig.width=7, fig.height=6}
plot(cars)
```
install.packages("knitr")
install.packages("knitr")
install.packages('knitr', dependencies = TRUE)
update.packages()
library(ISLR)
install.packages("ISLR")
install.packages("ISLR")
library(knitr)
library(markdown)
```{r}
library(ISLR)
summary(Hitters)
```
library(ISLR)
summary(Hitters)
Hitters=na.omit(Hitters)
with(Hitters,sum(is.na(Salary)))
library(leaps)
regfit.full=regsubsets(Salary~.,data=Hitters)
summary(regfit.full)
library(knitr)
library(markdown)
M <- matrix(rnorm(100), ,4)
apply(M, 2, hist)
M <- matrix(rnorm(100), ,4)
apply(M, 2, hist)
Title
========================================================
This is an R Markdown document. Markdown is a simple formatting syntax for authoring web pages (click the **MD** toolbar button for help on Markdown).
When you click the **Knit HTML** button a web page will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r}
summary(cars)
```
You can also embed plots, for example:
```{r fig.width=7, fig.height=6}
plot(cars)
```
library(knitr)
library(markdown)
M <- matrix(rnorm(100), ,4)
apply(M, 2, hist)
Title
========================================================
This is an R Markdown document. Markdown is a simple formatting syntax for authoring web pages (click the **MD** toolbar button for help on Markdown).
When you click the **Knit HTML** button a web page will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r}
M <- matrix(rnorm(100), ,4)
apply(M, 2, hist)
```
You can also embed plots, for example:
```{r fig.width=7, fig.height=6}
plot(cars)
```
library(knitr)
library(markdown)
install.packages("rCharts")
library(rCharts)
require(devtools)
install.packages("devtools")
require(devtools)
install_github('rCharts', 'ramnathv')
names(iris) = gsub("\\.", "", names(iris))
library(rCharts)
rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
install.packages("C:/Users/Андрей/Downloads/ramnathv-rCharts-2c368c8.zip", repos = NULL)
install.packages("httr")
install.packages("httr")
require(devtools)
install_github('rCharts', 'ramnathv')
?kable
??kable
library(knitr)
?kable
library(Hmisc)
?summary
?summary.formula
library(Hmisc)
library(psych)
library(xtable)
library(knitr)
options(digits=3)
set.seed(173)
sex <- factor(sample(c("m","f"), 500, rep=TRUE))
age <- rnorm(500, 50, 5)
treatment <- factor(sample(c("Drug","Placebo"), 500, rep=TRUE))
# Generate a 3-choice variable; each of 3 variables has 5 possible levels
symp <- c('Headache','Stomach Ache','Hangnail',
'Muscle Ache','Depressed')
symptom1 <- sample(symp, 500,TRUE)
symptom2 <- sample(symp, 500,TRUE)
symptom3 <- sample(symp, 500,TRUE)
Symptoms <- mChoice(symptom1, symptom2, symptom3, label='Primary Symptoms')
table(Symptoms)
print(summary(sex ~ treatment + Symptoms, fun=table))
summary(sex ~ treatment + Symptoms, fun=table)
kable(summary(sex ~ treatment + Symptoms, fun=table))
?kable
kable(summary(sex ~ treatment + Symptoms, fun=table), format = "latex")
RSTUDIO_PDFLATEX
Sys.getenv('RSTUDIO_PDFLATEX')
Sys.which("pdflatex")
Sys.getenv('RSTUDIO_PDFLATEX')
Sys.getenv('PATH')
Sys.setenv('RSTUDIO_PDFLATEX'='C:\MiKTeX\miktex\bin')
Sys.setenv('RSTUDIO_PDFLATEX'='C:/MiKTeX/miktex/bin')
Sys.getenv('RSTUDIO_PDFLATEX')
Sys.setenv('RSTUDIO_PDFLATEX'='')
Sys.getenv('RSTUDIO_PDFLATEX')
Sys.which("pdflatex")
texi2dvi
Sys.setenv('RSTUDIO_PDFLATEX'='C:/TEX/Full_TeX/WinEdt 8')
Sys.setenv('RSTUDIO_PDFLATEX'='C:/TEX/Full_TeX/texmf/miktex/bin')
Sys.setenv('RSTUDIO_PDFLATEX'='')
Sys.setenv('RSTUDIO_PDFLATEX'='C:/TEX/Full_TeX/texmf/miktex/bin/')
Sys.setenv('RSTUDIO_PDFLATEX'='C:/TEX/Full_TeX/texmf/miktex/bin/pdflatex.exe')
Sys.setenv('RSTUDIO_PDFLATEX'='')
?dvi
library(Hmisc)
?dvi
?dvigv
library(Hmisc)
library(psych)
library(xtable)
library(knitr)
options(digits=3)
set.seed(173)
sex <- factor(sample(c("m","f"), 500, rep=TRUE))
age <- rnorm(500, 50, 5)
treatment <- factor(sample(c("Drug","Placebo"), 500, rep=TRUE))
# Generate a 3-choice variable; each of 3 variables has 5 possible levels
symp <- c('Headache','Stomach Ache','Hangnail',
'Muscle Ache','Depressed')
symptom1 <- sample(symp, 500,TRUE)
symptom2 <- sample(symp, 500,TRUE)
symptom3 <- sample(symp, 500,TRUE)
Symptoms <- mChoice(symptom1, symptom2, symptom3, label='Primary Symptoms')
f <- summary(treatment ~ age + sex + Symptoms, method="reverse", test=TRUE)
f <- summary(treatment ~ age + sex + Symptoms, method="reverse", test=TRUE)
f <- summary(treatment ~ age + sex + Symptoms, method="reverse", test=TRUE)
f
latex(f)
latex(f, file='')
getwd()
install.packages("shiny")
library(shiny)
install.packages("shinyapps")
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
install.packages('rtools')
library(shinyapps)
setwd("D:/r/shiny1")
library(ggplot2)
library(shiny)
runApp()
shinyapps::setAccountInfo(name='statist', token='4AD6F6A2F60AF15C174FC96B76F93115', secret='VhmZ+oBYnRFigE930M6jCoO1gz2L323Q/HlEbfsm')
deployApp()
runApp
runApp
getwd()
runApp
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
sampleSize <- function(sigma, epsilon, power) {
((1,96+0,84)^2*sigma^2)/(2*(0,223-epsilon)^2)
sampleSize <- function(sigma, epsilon, power) {
((1,96+0,84)^2*sigma^2)/(2*(0,223-epsilon)^2)
}
runApp()
?floor
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?dnorm
dnorm(0) == 1/sqrt(2*pi)
pnorm(0.1, mean = 0, sd = 1, lower.tail = TRUE, log.p = FALSE)
pnorm(0.9, mean = 0, sd = 1, lower.tail = TRUE, log.p = FALSE)
pnorm(0.8, mean = 0, sd = 1, lower.tail = TRUE, log.p = FALSE)
pnorm(0.95, mean = 0, sd = 1, lower.tail = TRUE, log.p = FALSE)
pnorm(0.05, mean = 0, sd = 1, lower.tail = TRUE, log.p = FALSE)
qnorm(0.05, mean = 0, sd = 1, lower.tail = TRUE, log.p = FALSE)
qnorm(0.95, mean = 0, sd = 1, lower.tail = TRUE, log.p = FALSE)
qnorm(0.80, mean = 0, sd = 1, lower.tail = TRUE, log.p = FALSE)
qnorm(0.80, mean = 0, sd = 1, lower.tail = FALSE, log.p = FALSE)
qnorm(0.80, mean = 0, sd = 1, lower.tail = TRUE, log.p = FALSE)
runApp()
runApp()
power=80
sampleSize <- function(sigma, epsilon, power) {
ceiling((1.64+qnorm(power/200, 0, 1, lower.tail=T, log.p=F))^2*(sigma/100)^2/
(2*(0.223-epsilon/100)^2))
}
sampleSize(28, 5, 80)
qnorm(power/200, 0, 1, lower.tail=T, log.p=F)
runApp()
deployApp()
runApp()
deployApp()
?rpubs
